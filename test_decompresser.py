# coding: utf8

from decompresser import *

def test_cut_bits():
  a, b, c = cut_bits('000001110111010001101100101000000010111001001111101110010011111101001100001000001100001110101001011000010110010101110011011100110000110110011010110101001101110011111101110011101101111011111000010000111000100011100100110010110011001110')
  assert a == '00000111011101000110110010100000001011100100111110111001001111110100110000100000110000111010100101100001011001010111001101110011'
  assert b == '00001101100110101101010011011'
  assert c == '10011111101110011101101111011111000010000111000100011100100110010110011001110'
  a, b, c = cut_bits('00000001010101010101010101101010101000111000110001')
  assert a == '000000010101010101010101'
  assert b == '011'
  assert c == '01010101000111000110001'
  a, b, c = cut_bits('00000000000000001')
  assert a == '0000000000000000'
  assert b == '1'
  assert c == ''

def test_decode_char_list():
  assert [85, -1] == decode_char_list('000000010101010101010101')
  assert [-1] == decode_char_list('0000000000000000')
  assert [116, 108, 160, 46, 79, 185, 63, -1, 76, 32, 195, 169, 97, 101, 115] == decode_char_list('00000111011101000110110010100000001011100100111110111001001111110100110000100000110000111010100101100001011001010111001101110011')

def test_decode_conversion_table():
  assert {'' : -1} == decode_conversion_table('1', [-1])
  assert {'0' : 85, '1' : -1} == decode_conversion_table('011', [85, -1])
  assert {'000' : 1 , '001' : 2 , '01' : 3, '1' : 4} == decode_conversion_table('0001111', [1,2,3,4])

def test_decode_text():
  assert '' == decode_text('1', {'1' : -1})
  assert '000000000000000000000000' == decode_text('0001', {'1' : -1, '0' : 0})
  assert '100000000000000010000000000000001000000010000000' == decode_text('1001001101', {'1' : 128, '00' : 0, '01' : -1})